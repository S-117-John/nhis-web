package com.zebone.nhis.webservice.client.zhongshan.lis;

import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

/**
 * This class was generated by Apache CXF 3.0.13 2017-05-18T15:17:36.141+08:00
 * Generated source version: 3.0.13
 * 
 */
@WebServiceClient(name = "Service", targetNamespace = "http://tempuri.org/")
public class Service extends javax.xml.ws.Service {

	public final static URL WSDL_LOCATION = null;

	public final static QName SERVICE = new QName("http://tempuri.org/", "Service");

	public final static QName ServiceSoap = new QName("http://tempuri.org/", "ServiceSoap");

	public final static QName ServiceSoap12 = new QName("http://tempuri.org/", "ServiceSoap12");

	public Service(URL wsdlLocation) {

		super(wsdlLocation, SERVICE);
	}

	public Service(URL wsdlLocation, QName serviceName) {

		super(wsdlLocation, serviceName);
	}

	public Service() {

		super(WSDL_LOCATION, SERVICE);
	}

	// This constructor requires JAX-WS API 2.2. You will need to endorse the
	// 2.2
	// API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS
	// 2.1
	// compliant code instead.
	public Service(WebServiceFeature... features) {

		super(WSDL_LOCATION, SERVICE, features);
	}

	// This constructor requires JAX-WS API 2.2. You will need to endorse the
	// 2.2
	// API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS
	// 2.1
	// compliant code instead.
	public Service(URL wsdlLocation, WebServiceFeature... features) {

		super(wsdlLocation, SERVICE, features);
	}

	// This constructor requires JAX-WS API 2.2. You will need to endorse the
	// 2.2
	// API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS
	// 2.1
	// compliant code instead.
	public Service(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {

		super(wsdlLocation, serviceName, features);
	}

	/**
	 * 
	 * @return returns ServiceSoap
	 */
	@WebEndpoint(name = "ServiceSoap")
	public ServiceSoap getServiceSoap() {

		return super.getPort(ServiceSoap, ServiceSoap.class);
	}

	/**
	 * 
	 * @param features
	 *            A list of {@link javax.xml.ws.WebServiceFeature} to configure
	 *            on the proxy. Supported features not in the
	 *            <code>features</code> parameter will have their default
	 *            values.
	 * @return returns ServiceSoap
	 */
	@WebEndpoint(name = "ServiceSoap")
	public ServiceSoap getServiceSoap(WebServiceFeature... features) {

		return super.getPort(ServiceSoap, ServiceSoap.class, features);
	}

	/**
	 * 
	 * @return returns ServiceSoap
	 */
	@WebEndpoint(name = "ServiceSoap12")
	public ServiceSoap getServiceSoap12() {

		return super.getPort(ServiceSoap12, ServiceSoap.class);
	}

	/**
	 * 
	 * @param features
	 *            A list of {@link javax.xml.ws.WebServiceFeature} to configure
	 *            on the proxy. Supported features not in the
	 *            <code>features</code> parameter will have their default
	 *            values.
	 * @return returns ServiceSoap
	 */
	@WebEndpoint(name = "ServiceSoap12")
	public ServiceSoap getServiceSoap12(WebServiceFeature... features) {

		return super.getPort(ServiceSoap12, ServiceSoap.class, features);
	}

}

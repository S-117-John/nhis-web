package com.zebone.nhis.webservice.client.zhongshan.op;

import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

/**
 * Docare医疗数据集成平台
 * 
 * This class was generated by Apache CXF 3.0.13 2017-05-18T15:16:59.540+08:00
 * Generated source version: 3.0.13
 * 
 */
@WebServiceClient(name = "DocareTrunDataService", targetNamespace = "http://www.medicalsystem.com.cn")
public class DocareTrunDataService extends javax.xml.ws.Service {

	public final static URL WSDL_LOCATION = null;

	public final static QName SERVICE = new QName("http://www.medicalsystem.com.cn", "DocareTrunDataService");

	public final static QName DocareTrunDataServiceSoap = new QName("http://www.medicalsystem.com.cn", "DocareTrunDataServiceSoap");

	public final static QName DocareTrunDataServiceSoap12 = new QName("http://www.medicalsystem.com.cn", "DocareTrunDataServiceSoap12");

	public DocareTrunDataService(URL wsdlLocation) {

		super(wsdlLocation, SERVICE);
	}

	public DocareTrunDataService(URL wsdlLocation, QName serviceName) {

		super(wsdlLocation, serviceName);
	}

	public DocareTrunDataService() {

		super(WSDL_LOCATION, SERVICE);
	}

	// This constructor requires JAX-WS API 2.2. You will need to endorse the
	// 2.2
	// API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS
	// 2.1
	// compliant code instead.
	public DocareTrunDataService(WebServiceFeature... features) {

		super(WSDL_LOCATION, SERVICE, features);
	}

	// This constructor requires JAX-WS API 2.2. You will need to endorse the
	// 2.2
	// API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS
	// 2.1
	// compliant code instead.
	public DocareTrunDataService(URL wsdlLocation, WebServiceFeature... features) {

		super(wsdlLocation, SERVICE, features);
	}

	// This constructor requires JAX-WS API 2.2. You will need to endorse the
	// 2.2
	// API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS
	// 2.1
	// compliant code instead.
	public DocareTrunDataService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {

		super(wsdlLocation, serviceName, features);
	}

	/**
	 * 
	 * @return returns DocareTrunDataServiceSoap
	 */
	@WebEndpoint(name = "DocareTrunDataServiceSoap")
	public DocareTrunDataServiceSoap getDocareTrunDataServiceSoap() {

		return super.getPort(DocareTrunDataServiceSoap, DocareTrunDataServiceSoap.class);
	}

	/**
	 * 
	 * @param features
	 *            A list of {@link javax.xml.ws.WebServiceFeature} to configure
	 *            on the proxy. Supported features not in the
	 *            <code>features</code> parameter will have their default
	 *            values.
	 * @return returns DocareTrunDataServiceSoap
	 */
	@WebEndpoint(name = "DocareTrunDataServiceSoap")
	public DocareTrunDataServiceSoap getDocareTrunDataServiceSoap(WebServiceFeature... features) {

		return super.getPort(DocareTrunDataServiceSoap, DocareTrunDataServiceSoap.class, features);
	}

	/**
	 * 
	 * @return returns DocareTrunDataServiceSoap
	 */
	@WebEndpoint(name = "DocareTrunDataServiceSoap12")
	public DocareTrunDataServiceSoap getDocareTrunDataServiceSoap12() {

		return super.getPort(DocareTrunDataServiceSoap12, DocareTrunDataServiceSoap.class);
	}

	/**
	 * 
	 * @param features
	 *            A list of {@link javax.xml.ws.WebServiceFeature} to configure
	 *            on the proxy. Supported features not in the
	 *            <code>features</code> parameter will have their default
	 *            values.
	 * @return returns DocareTrunDataServiceSoap
	 */
	@WebEndpoint(name = "DocareTrunDataServiceSoap12")
	public DocareTrunDataServiceSoap getDocareTrunDataServiceSoap12(WebServiceFeature... features) {

		return super.getPort(DocareTrunDataServiceSoap12, DocareTrunDataServiceSoap.class, features);
	}

}
